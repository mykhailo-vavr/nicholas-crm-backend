generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  volunteer
  admin
  superAdmin
}

enum Gender {
  male
  female
  universal
}

enum NeedStatus {
  moderate
  very
}

enum GiftType {
  hygieneProduct
  stationery
  toy
  clothes
  other
}

enum GiftSubtype {
  notebook
  colored
  book
  art
  album
}

model User {
  id Int @id @default(autoincrement())

  firstName          String  @db.VarChar(20)
  lastName           String  @db.VarChar(20)
  phone              String  @unique @db.VarChar(20)
  email              String  @unique @db.VarChar(100)
  password           String  @db.VarChar(255)
  role               Role
  isActive           Boolean @default(true)
  deactivationReason String?

  volunteer    Volunteer?
  activityLogs ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id Int @id @default(autoincrement())

  description String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id Int @id @default(autoincrement())

  city         String  @db.VarChar(30)
  street       String  @db.VarChar(50)
  streetNumber String? @db.VarChar(10)
  flatNumber   Int?

  children        Child[]
  routesAddresses RouteAdress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id Int @id @default(autoincrement())

  firstName          String     @db.VarChar(20)
  lastName           String     @db.VarChar(20)
  birthYear          Int
  gender             Gender
  phone              String
  notes              String?
  needStatus         NeedStatus
  isActive           Boolean    @default(true)
  deactivationReason String?

  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gift {
  id Int @id @default(autoincrement())

  name             String      @unique @db.VarChar(50)
  type             GiftType
  subtype          GiftSubtype
  forGender        Gender
  description      String?
  minAge           Int
  maxAge           Int
  requiredQuantity Int?
  currentQuantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id              Int              @id @default(autoincrement())
  routeAdresses   RouteAdress[]
  routeVolunteers RouteVolunteer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RouteAdress {
  routeId   Int
  addressId Int

  address Address @relation(fields: [addressId], references: [id])
  route   Route   @relation(fields: [routeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([routeId, addressId])
}

model RouteVolunteer {
  routeId     Int
  volunteerId Int

  route     Route     @relation(fields: [routeId], references: [id])
  volunteer Volunteer @relation(fields: [volunteerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([routeId, volunteerId])
}

model Volunteer {
  id Int @id @default(autoincrement())

  birthDate DateTime @db.Date
  hasCar    Boolean

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  routeVolunteers RouteVolunteer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
